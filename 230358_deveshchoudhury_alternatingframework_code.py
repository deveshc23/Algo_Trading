# -*- coding: utf-8 -*-
"""230358_DEVESHCHOUDHURY_AlternatingFramework_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1INyZT127vkebeTYKCT9MsYVcsezQWfyL
"""

import pandas as pd
import numpy as np
df=pd.read_csv('Alternating Framework.csv')
df.head()

#Strategy A
def calculate_macd(df, short_period=12, long_period=26, signal_period=9):
    exp1 = df['Close'].ewm(span=short_period, adjust=False).mean()
    exp2 = df['Close'].ewm(span=long_period, adjust=False).mean()
    macd = exp1 - exp2
    signal = macd.ewm(span=signal_period, adjust=False).mean()
    return macd, signal
#Strategy B
def calculate_rsi(df, period=14):
    delta = df['Close'].diff(1)
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def is_hammer(df, i):
    body_size = abs(df['Open'][i] - df['Close'][i])
    lower_shadow = min(df['Open'][i], df['Close'][i]) - df['Low'][i]
    upper_shadow = df['High'][i] - max(df['Open'][i], df['Close'][i])

    # Conditions for a Hammer:
    return (
        lower_shadow >= 2 * body_size
        and upper_shadow < body_size
        and df['Close'][i] > df['Open'][i]
    )

def is_hanging_man(df, i):
    body_size = abs(df['Open'][i] - df['Close'][i])
    lower_shadow = min(df['Open'][i], df['Close'][i]) - df['Low'][i]
    upper_shadow = df['High'][i] - max(df['Open'][i], df['Close'][i])

    # Conditions for a Hanging Man:
    return (
        lower_shadow >= 2 * body_size
        and upper_shadow < body_size
        and df['Close'][i] < df['Open'][i]
    )

def calculate_performance_metrics(df, trades_df):
    total_return = (trades_df['exit_price'] / trades_df['entry_price'] - 1).sum()
    annual_return = (1 + total_return) ** (252 / len(df)) - 1  # Assuming 252 trading days per year
    return_percentage = total_return * 100

    daily_returns = df['Close'].pct_change()
    strategy_returns = pd.Series(0, index=df.index)
    for _, trade in trades_df.iterrows():
        strategy_returns.loc[trade['entry_date']:trade['exit_date']] = daily_returns.loc[trade['entry_date']:trade['exit_date']]
    sharpe_ratio = np.sqrt(252) * strategy_returns.mean() / strategy_returns.std()

    negative_returns = strategy_returns.loc[strategy_returns < 0]
    sortino_ratio = np.sqrt(252) * strategy_returns.mean() / negative_returns.std()

    cumulative_returns = (1 + strategy_returns).cumprod()
    peak = cumulative_returns.cummax()
    drawdown = (cumulative_returns - peak) / peak
    max_drawdown = drawdown.min() * 100

    trades_df['Profit/Loss'] = (trades_df['exit_price'] - trades_df['entry_price']) * trades_df['shares']
    net_profit = trades_df['Profit/Loss'].sum()
    gross_profit = trades_df[trades_df['Profit/Loss'] > 0]['Profit/Loss'].sum()
    gross_loss = trades_df[trades_df['Profit/Loss'] < 0]['Profit/Loss'].sum()
    total_trades = len(trades_df)
    winning_trades = len(trades_df[trades_df['Profit/Loss'] > 0])
    losing_trades = len(trades_df[trades_df['Profit/Loss'] < 0])
    percent_profitable = (winning_trades / total_trades) * 100


    return {
        'Return Percentage': return_percentage,
        'Annualized Return': annual_return,
        'Sharpe Ratio': sharpe_ratio,
        'Sortino Ratio': sortino_ratio,
        'Max Drawdown': max_drawdown,
        'Net Profit': net_profit,
        'Gross Profit': gross_profit,
        'Gross Loss': gross_loss,
        'Total Trades': total_trades,
        'Percent Profitable': percent_profitable,
        'Winning Trades': winning_trades,
        'Losing Trades': losing_trades,
    }

def simulate_alternating_strategy(df, initial_capital=10000):
    macd, signal = calculate_macd(df)
    rsi = calculate_rsi(df)

    in_trade = False
    active_strategy = 'MACD'
    trades = []
    capital = initial_capital
    shares_held = 0

    for i in range(1, len(df)):
        if not in_trade:
            # MACD Buy with Hammer confirmation
            if (
                active_strategy == 'MACD'
                and macd[i] > signal[i]
                and is_hammer(df, i - 1)
            ):
                shares_held = capital // df['Close'][i]
                capital -= shares_held * df['Close'][i]
                trades.append(
                    {
                        'entry_date': df.index[i],
                        'strategy': 'MACD',
                        'entry_price': df['Close'][i],
                        'shares': shares_held,
                    }
                )
                in_trade = True

            # RSI Buy with Hammer confirmation
            elif (
                active_strategy == 'RSI'
                and rsi[i] < 30
                and is_hammer(df, i - 1)
            ):
                shares_held = capital // df['Close'][i]
                capital -= shares_held * df['Close'][i]
                trades.append(
                    {
                        'entry_date': df.index[i],
                        'strategy': 'RSI',
                        'entry_price': df['Close'][i],
                        'shares': shares_held,
                    }
                )
                in_trade = True

        elif in_trade:
            # MACD Sell with Hanging Man confirmation
            if (
                active_strategy == 'MACD'
                and macd[i] < signal[i]
                and is_hanging_man(df, i - 1)
            ):
                trades[-1]['exit_date'] = df.index[i]
                trades[-1]['exit_price'] = df['Close'][i]
                capital += shares_held * df['Close'][i]
                in_trade = False
                shares_held = 0

                print(f"Trade Closed (MACD): Exit at {df['Close'][i]} on {df.index[i]}")
                # Evaluate RSI performance during MACD trade
                hypothetical_rsi_return = (df['Close'][i] / df['Close'][trades[-1]['entry_date']]) - 1
                if hypothetical_rsi_return > trades[-1]['exit_price'] / trades[-1]['entry_price'] - 1:
                    active_strategy = 'RSI'

            # RSI Sell with Hanging Man confirmation
            elif (
                active_strategy == 'RSI'
                and rsi[i] > 70
                and is_hanging_man(df, i - 1)
            ):
                trades[-1]['exit_date'] = df.index[i]
                trades[-1]['exit_price'] = df['Close'][i]
                capital += shares_held * df['Close'][i]
                in_trade = False
                shares_held = 0
                print(f"Trade Closed (RSI): Exit at {df['Close'][i]} on {df.index[i]}")
                # Evaluate MACD performance during RSI trade
                hypothetical_macd_return = (df['Close'][i] / df['Close'][trades[-1]['entry_date']]) - 1
                if hypothetical_macd_return > trades[-1]['exit_price'] / trades[-1]['entry_price'] - 1:
                    active_strategy = 'MACD'

    # Sell off remaining positions at the end
    if in_trade:
        trades[-1]['exit_date'] = df.index[-1]
        trades[-1]['exit_price'] = df['Close'][-1]
        capital += shares_held * df['Close'][-1]

    metrics = calculate_performance_metrics(df, pd.DataFrame(trades))
    metrics['Final Capital'] = capital
    return pd.DataFrame(trades), metrics


trades_df, metrics = simulate_alternating_strategy(df)
print(trades_df)
for metric_name, metric_value in metrics.items():
    print(f"{metric_name}: {metric_value:.2f}")